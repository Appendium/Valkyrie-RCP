buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'us.kirchmeier:gradle-capsule-plugin:1.0.0'
    }
}

version = "2.0.0"

def globalVersion = new Version(version)

configure(subprojects - project(":valkyrie-rcp-integrations") - project(":valkyrie-rcp-samples")) {
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven"

    group = "org.valkyriercp"
    sourceCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    version = globalVersion
    status = version.status

    repositories {
        maven {
            url "file://${rootDir}/dependencies"
        }
        maven {
            url "http://maven.icm.edu.pl/artifactory/repo/"
        }
        jcenter()
    }

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        provided {
            dependencies.all { dep ->
                configurations.default.exclude group: dep.group, module: dep.name
            }
        }
        compile.extendsFrom provided
    }

    test {
        scanForTestClasses = false
        include '**/*Tests.*'
        include '**/*Spec.*'
        exclude '**/*Abstract*.*'
    }

    jar {
        enabled = !sourceSets.main.allSource.empty
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        enabled = !sourceSets.main.allSource.empty
        classifier = "sources"
        from sourceSets.main.allJava.srcDirs
        include "**/*.java"
    }

    task javadocJar(type: Jar) {
        enabled = !sourceSets.main.allSource.empty
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
    }

    dependencies {
        testCompile "junit:junit:4.12"
        testCompile "org.spockframework:spock-spring:1.3-groovy-2.4"
        testCompile "org.codehaus.groovy:groovy-all:2.4.17"
        testCompile "org.gcontracts:gcontracts-core:1.2.12"
        testCompile "org.springframework:spring-test:5.2.3.RELEASE"
        compile "org.slf4j:slf4j-api:1.7.28"
        compile "org.slf4j:jcl-over-slf4j:1.7.28"
        runtime "ch.qos.logback:logback-classic:1.2.3"
    }
}

configure([
        project(":valkyrie-rcp-resources"),
        project(":valkyrie-rcp-core"),
        project(":valkyrie-rcp-integrations:valkyrie-rcp-jodatime"),
        project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss"),
        project(":valkyrie-rcp-integrations:valkyrie-rcp-vldocking"),

]) {
    if (project.hasProperty('bintray_api_user') && project.hasProperty('bintray_api_key')) {
        apply plugin: 'com.jfrog.bintray'
        apply plugin: "maven"

        bintray {
            user = "${bintray_api_user?:''}"
            key = "${bintray_api_key?:''}"

            configurations = ['archives']

            pkg {
                repo = 'maven'
                name = 'valkyriercp'
                version {
                    name = globalVersion
                    vcsTag = globalVersion
                }
            }
        }
    }
}



project("valkyrie-rcp-resources") {
    dependencies {
        compile "com.famfamfam:silk:1.3"
        compile "org.freedesktop.tango:tango-icon-theme:0.8.90"
    }
}

project("valkyrie-rcp-core") {
    dependencies {
        compile project(":valkyrie-rcp-resources")
        compile "com.l2fprod:l2fprod-common-all:7.3"
        compile "com.glazedlists:glazedlists:1.11.0"
        compile "commons-beanutils:commons-beanutils:1.9.4"
        compile 'org.apache.commons:commons-lang3:3.8.1'
        compile "org.cache2k:cache2k-api:1.2.4.Final"
        runtime "org.cache2k:cache2k-core:1.2.4.Final"
        compile "com.github.jiconfont:jiconfont-swing:1.0.0"
        compile "org.springframework.security:spring-security-core:5.2.2.RELEASE"
        compile "org.springframework.security:spring-security-config:5.2.2.RELEASE"
        compile "org.springframework:spring-context:5.2.3.RELEASE"
        compile "org.swinglabs.swingx:swingx-all:1.6.5-1"
        compile "com.jgoodies:forms:1.2.1"
        compile "javax.help:javahelp:2.0.05"
        compile 'javax.annotation:javax.annotation-api:1.3.2'
        compile "javax.validation:validation-api:2.0.1.Final"
        compile "com.miglayout:miglayout-swing:5.2"
        compile 'org.yaml:snakeyaml:1.25'
    }
}

project("valkyrie-rcp-integrations:valkyrie-rcp-jodatime") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "joda-time:joda-time:2.10.3"
    }
}

project("valkyrie-rcp-integrations:valkyrie-rcp-jideoss") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "com.jidesoft:jide-oss:3.6.0"
    }
}

project("valkyrie-rcp-integrations:valkyrie-rcp-vldocking") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "com.vlsolutions:vldocking:3.0.2"
    }
}

project("valkyrie-rcp-integrations:valkyrie-rcp-dockingframes") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "org.dockingframes:docking-frames-common:1.1.1"
    }
}

project("valkyrie-rcp-samples:valkyrie-rcp-simple-sample") {
    apply plugin: 'us.kirchmeier.capsule'

    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss")
        compile "com.jgoodies:jgoodies-looks:2.7.0"
    }
}

project("valkyrie-rcp-samples:valkyrie-rcp-showcase-sample") {
    apply plugin: 'us.kirchmeier.capsule'

    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss")
        compile "com.jgoodies:jgoodies-looks:2.7.0"
    }
}


project("valkyrie-rcp-samples:valkyrie-rcp-dataeditor-sample") {
    apply plugin: 'us.kirchmeier.capsule'

    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss")
        compile "com.jgoodies:jgoodies-looks:2.7.0"
    }
}


project("valkyrie-rcp-samples:valkyrie-rcp-vldocking-sample") {
    apply plugin: 'us.kirchmeier.capsule'

    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-vldocking")
        compile "com.jgoodies:jgoodies-looks:2.7.0"
    }
}

project("valkyrie-rcp-samples:valkyrie-rcp-dockingframes-sample") {
    apply plugin: 'us.kirchmeier.capsule'

    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-dockingframes")
        compile "com.jgoodies:jgoodies-looks:2.7.0"
    }
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
